{
    "language": "Solidity",
    "sources": {
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
        },
        "contracts/FundMe.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.8;\nimport \"./PriceConverter.sol\";\n//681685\nerror NotOwner();\ncontract FundMe {\n    using PriceConverter for uint256;\n    uint256 public constant MINIMUM_USD = 5 * 1e18;\n    address[] public funders;\n    mapping (address => uint256) public addressToAmount;\n    address public immutable i_owner;\n\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress){\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n        i_owner = msg.sender;\n    }\n\n    function fund() public payable {\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, \"Didn't send enough\");\n        funders.push(msg.sender);\n        addressToAmount[msg.sender] = msg.value;\n    }\n    function withdraw() onlyOwner public {\n        for(uint f=0;f<funders.length;f++) {\n            address funder = funders[f];\n            addressToAmount[funder] = 0;\n        }\n        funders = new address[](0);\n        // payable(msg.sender).transfer(address(this).balance);\n        // bool sendReq =  payable(msg.sender).send(address(this).balance);\n        // require(sendReq, \"Send failed\");\n        (bool callSuccess,) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Transfer failed\");\n\n    }\n    receive () external payable {\n        fund();\n    }\n    fallback () external payable {\n        fund();\n    }\n\n    modifier onlyOwner {\n        // require(msg.sender == i_owner, \"You are not allowed\");\n        if(msg.sender != i_owner){revert NotOwner();}\n        _;\n    }\n\n}"
        },
        "contracts/PriceConverter.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.8;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(AggregatorV3Interface priceFeed) public view returns(uint256) { \n        (,int256 price,,,) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return  ethAmountInUsd;\n    }\n}"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
